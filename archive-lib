#!/bin/bash
#
# Copyright Â© 2003-2007 Guillem Jover <guillem@debian.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

#
# Requires: procmail (formail)
#

# Sanitize environment

unset LANG
unset LC_ALL

# Import configuration

. archive.conf

# Canonicalize directories

accepted_dir=$queue_dir/accepted
rejected_dir=$queue_dir/rejected
rejected_daily_dir=$rejected_dir/`date -I`
unchecked_dir=$queue_dir/unchecked
byhand_dir=$queue_dir/byhand

######
# file input functions

fetch_field ()
{
  local field=$1

  formail -z -x$field:
}

fetch_source_name ()
{
  fetch_field Source | cut -d' ' -f1
}

fetch_files ()
{
  formail -xFiles: | cut -d' ' -f6
}

fetch_checksums ()
{
  local digest=$1

  if [ $digest = md5 ]; then
    formail -xFiles: | cut -d' ' -f2,6 | sed -e 's/ /  /'
  else
    formail -xChecksums-$digest: | cut -d' ' -f2,4 | sed -e 's/ /  /'
  fi
}

fetch_secure_files ()
{
  local files=`fetch_files`

  for file in $files; do
    echo $(basename "`readlink -f $file`")
  done
}

fetch_single_arch ()
{
  local arches=`fetch_field "Architecture"`

  echo $(filter_real_arches $arches)
}

filter_real_arches ()
{
  local arches=$@
  local real_arches=$(echo $arches | sed -re 's/(source|all) ?//g')

  echo $real_arches
}

get_archive_arches ()
{
  local arches

  for suite in $suite_list; do
    arches="$arches $(get_suite_arches $suite)"
  done

  arches="$(echo $arches | tr ' ' '\n' | sort -u)"

  echo $(filter_real_arches $arches)
}

get_pool_dirs ()
{
  if [ "$multipool" = "yes" ]; then
    local pool_dirs

    for arch in $(get_archive_arches); do
      pool_dirs="$pool_dirs $pool_dir-$arch"
    done
    echo "$pool_dirs"
  else
    echo "$pool_dir/"
  fi
}

get_pool_dir_arch ()
{
  local arch=$1

  if [ "$multipool" = "yes" ]; then
    echo "$pool_dir-$arch/"
  else
    echo "$pool_dir/"
  fi
}

get_suite_arches ()
{
  local suite=$(canonic_suite $1)

  eval echo \$arch_list_$suite
}

get_suite_sections ()
{
  echo $section_list
}

valid_arch ()
{
  local v_suite=$1
  local v_arch=$2

  for arch in $(get_suite_arches $v_suite) all; do
    if [ "$arch" = "$v_arch" ]; then
      return 0
    fi
  done

  return 1
}

get_suite_codename()
{
  local suite=$1

  for s_alias in $suite_alias; do
    s_codename=${s_alias%%:*}
    s_suite=${s_alias##*:}

    if [ "$suite" = $s_suite ]; then
      echo $s_codename
      return 0
    fi
  done

  echo $suite
}

canonic_suite()
{
  local code_name=$1

  for s_alias in $suite_alias; do
    s_code_name=${s_alias%%:*}
    s_suite=${s_alias##*:}

    if [ "$code_name" = $s_code_name ]; then
      echo $s_suite
      return 0
    fi
  done

  echo $code_name
}

poolize_hash_name()
{
  echo $1 | sed -e 's/^\(\(lib\)\?.\).*$/\1/'
}

poolize_package_name()
{
  local name=$1
  local package=`echo $name | cut -d_ -f1`
  local section=main
  local hash_dir=`poolize_hash_name $package`
  local dest_dir=$pool_dir/$section/$hash_dir/$package/

  echo $dest_dir
}

poolize_arch_name()
{
  local package=$1
  local arch=$2
  local section=main
  local hash_dir=`poolize_hash_name $package`

  if [ "$multipool" = "yes" ]; then
    local dest_dir=$pool_dir-$arch/$section/$hash_dir/$package/
  else
    local dest_dir=$pool_dir/$section/$hash_dir/$package/
  fi

  echo $dest_dir
}

# .changes management functions

changes_canonic ()
{
  while read f_changes; do
    archive=`changes_strip < $f_changes`
    package=`echo "$archive" | fetch_source_name`
    version=`echo "$archive" | fetch_field "Version"`
    suite=`echo "$archive" | fetch_field "Distribution"`
    arches=`echo "$archive" | fetch_field "Architecture"`

    for arch in $(filter_real_arches $arches); do
      printf "%s %s %s %s %s\n" $package $suite $arch $version $f_changes
    done
  done
}

changes_obsolete ()
{
  # FIXME: Should implement suite stacks for obsoleting purposes.
  #               (unstable + unreleased) < experimental
  #        Should remove the hardcoded experimental check.
  while read package suite arch version path; do
    if [ "$package" = "$g_package" ] &&
       [ "$arch" = "$g_arch" ]; then
      if dpkg --compare-versions $g_version lt $version; then
        if [ "$g_suite" = "experimental" -o "$suite" != "experimental" ]; then
          printf "%s %s %s %s %s\n" $g_package $g_suite $g_arch $g_version $g_path
        fi
      else
        if [ "$suite" = "experimental" -o "$g_suite" != "experimental" ]; then
          printf "%s %s %s %s %s\n" $package $suite $arch $version $path
        fi
      fi
    fi
    g_package=$package
    g_version=$version
    g_suite=$suite
    g_arch=$arch
    g_path=$path
  done
}

changes_strip ()
{
  awk  '
BEGIN { block = 0; contents = 0 }
/^-----BEGIN PGP SIGNATURE/ { exit }
block && contents { print }
/^-----BEGIN PGP SIGNED/ { block = 1 }
block && /^ *$/ { contents = 1 }
'
}

archive_move ()
{
  local mode=$1
  local fetch_files='fetch_files'
  if [ $mode = "secure" ]; then
    fetch_files='fetch_secure_files'
    shift
  fi
  local archive_file=$1
  local changes_file=`basename $archive_file archive`changes
  local dest_dir=$2
  local files=`$fetch_files < $archive_file`

  mv -f $changes_file "$dest_dir" 2>/dev/null

  if mv $files "$dest_dir"; then
    return 0
  else
    return 1
  fi
}

files_owner_perms ()
{
  local files=$@

  chown -f $archive_owner:$archive_group $files
  chmod $archive_perms $files
}

dirs_owner_perms ()
{
  local dirs=$@

  chown -f $archive_owner:$archive_group $dirs
  chmod $archive_perms_dir $dirs
}

time_full ()
{
  date -Iseconds | tr 'T' ' '
}

echo_time ()
{
  echo "`time_full` $@"
}

logpipe()
{
  local name=$1
  local log_monthly_dir=$log_dir/`date +%Y`/`date +%m`
  local logfile=$log_monthly_dir/$name-`date -I`.log

  mkdir -p $log_monthly_dir
  dirs_owner_perms $log_monthly_dir
  tee -a $logfile
}

log()
{
  local name=$1

  shift
  echo -e "$@" | logpipe "$name"
}

msg_queue ()
{
  local subject=$1
  local recipient=$2

  (
    cat
    echo "$subject"
    echo
  ) | logpipe queue

  if [ "$MAIL_REPORT" = "yes" ]; then
    (
      cat
      echo
      echo "-- "
      echo "Archive Maintainer ($archive_maint)"
    ) | mail -s "$subject" "$recipient"
  fi
}
